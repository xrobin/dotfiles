#!/usr/bin/env bash
#
# bootstrap installs things.

DOTFILES_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

soft_fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

fail () {
  soft_fail "$1"
  echo ''
  exit
}

try_exec () {
    cmd=$1
    error_msg=$2
    set +e
    e_out=$(eval $1 2>&1 )
    e_success=$?
    set -e
    if [[ $e_success == 0 ]]; then
        : # continue
    else
        soft_fail "$error_msg ($cmd). Full output:"
        echo "$e_out"
        exit $e_success
    fi
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

pull_submodules () {
    info 'setup git submodules'
    cd "$DOTFILES_ROOT"
    try_exec "git submodule init" "error initializing git submodules"
    try_exec "git submodule update" "error updating git submodules"
    success "git submodules up to date"
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

setup_safe_rm() {
	cd safe-rm
	wget https://launchpad.net/safe-rm/trunk/0.12/+download/safe-rm-0.12.tar.gz
	tar -xf safe-rm-0.12.tar.gz
	rm safe-rm-0.12.tar.gz
	cd ..
}

try_install_file() {
    src=$1
    dst=$2

    if [ -f $dst ] || [ -d $dst ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename ${dst}`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dst
        success "removed $dst"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dst $dst\.backup
        success "moved $dst to $dst.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $src $dst
      else
        success "skipped $src"
      fi

    elif [ -h "$dst" -a ! -e "$dst"  ] ; then
      rm "$dst"
      link_files $src $dst

    else
      link_files $src $dst
    fi
    
}

install_pip () {
    info "installing pip"

    if hash pip 2>/dev/null; then
        success "pip already installed"
    else
        if hash easy_install 2>/dev/null && easy_install --help|grep user>/dev/null; then
	                                    # Does easy_install support "--user"?
		try_exec "easy_install --user pip" "error installing pip with easy_install"
	elif hash wget 2>/dev/null && hash python 2>/dev/null; then
		# Try with get_pip
		try_exec "wget https://bootstrap.pypa.io/get-pip.py" "error downloading get-pip.py"
		try_exec "python get-pip.py --user" "error installing pip with get-pip.py"
		try_exec "rm get-pip.py" "error cleaning up get-pip.py"
	else
		fail "cannot install pip on this system: missing wget and python. Try manually or with your package manager (typically python-pip package)"
        fi
	success "pip installed successfully"
    fi
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
      dest="$HOME/.`basename \"${source%.*}\"`"
      try_install_file "$source" "$dest"
  done
  if [ ! -e "$HOME/bin" ]; then
  	try_exec "mkdir -p $HOME/bin" "bin folder created"
  fi
  for source in `find $DOTFILES_ROOT/bin -maxdepth 1 -name \*.bin`
  do
      dest="$HOME/bin/`basename \"${source%.*}\"`"
      try_install_file "$source" "$dest"
  done
}

install_docopt () {
    info 'installing docopts'
  
    if hash docopts 2>/dev/null && docopts -h >/dev/null 2>&1; then
        success "skipped docopts"
    else
        cd $DOTFILES_ROOT/docopts
	try_exec "pip install --user docopt" "error installing docopt python module"
        try_exec "python setup.py build" "error installing docopts"
        try_install_file $DOTFILES_ROOT/docopts/docopts $HOME/bin/docopts
	success "docopts installed successfully"
    fi
}

install_trash () {
    info 'installing trash-cli'
  
    if hash trash 2>/dev/null; then
        success "skipped trash-cli"
    else
	try_exec "git clone https://github.com/andreafrancia/trash-cli.git" "error getting trash-cli from GitHub"
        try_exec "cd trash-cli && python setup.py install --user" "error installing trash-cli"
	try_exec "rm -rf trash-cli" "error cleaning up trash-cli"
        #try_install_file $DOTFILES_ROOT/docopts/docopts $HOME/bin/docopts
	success "trash-cli installed successfully"
    fi
}

install_thefuck () {
    info 'installing thefuck'
  
    if hash thefuck 2>/dev/null && thefuck -h >/dev/null 2>&1; then
        success "skipped thefuck"
    else
	try_exec "pip install --user thefuck" "error installing thefuck python module"
	success "thefuck installed successfully"
    fi
}


install_pip
pull_submodules

# setup_gitconfig
install_dotfiles
install_docopt
install_trash
install_thefuck

# If we're on a Mac, let's install and setup homebrew.
#if [ "$(uname -s)" == "Darwin" ]
#then
#  info "installing dependencies"
#  if . bin/dot > /tmp/dotfiles-dot 2>&1
#  then
#    success "dependencies installed"
#  else
#    fail "error installing dependencies"
#  fi
#fi


echo ''
echo '  All installed!'
